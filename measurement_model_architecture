# ECG-parameter-measurement
Model to calculate ECG measurements

# Environment
- tensorflow 2.4.1 
- numpy 1.19.2
- pandas 1.3.4

# Requirements
Put the input file in the same directory as EFcode_1220.py as numpy array.
The input should be formated as a 3d numpy array with shape 2500,12,1 (time,induction,1).
The ECG should be in 250 Hz recording with voltage unit = mV.


# Model architecture
The model consists of a layer of 2D convolutional neural network (CNN) layer followed by 20 layers of multi_conv2D module, which consists of 3 different-depth 2D-CNN layers.
The first CNN layer has a kernel shape of (7x3) whille all remaining CNN layers have (3x3).
The final CNN layer is followed by a global average pooling and a single fully connected layer.
The model has 258,754,113 parameters (258,546,625 trainable)

SHAPE=(2500, 12, 1)

def multi_conv2D(x,num_kernel,activation="relu"):
    kreg = None#regularizers.l2(0.01)
    sk = Conv2D(int(num_kernel*3),1,activation=None,padding="same",kernel_regularizer=kreg)(x)
    sk = BatchNormalization()(sk)
    a = Conv2D(int(num_kernel),1,activation=activation,padding="same",kernel_regularizer=kreg)(x)
    a = BatchNormalization()(a)
    a = Conv2D(num_kernel,3,activation=activation,padding="same",kernel_regularizer=kreg)(a)
    a = BatchNormalization()(a)
    b = Conv2D(int(num_kernel),1,activation=activation,padding="same",kernel_regularizer=kreg)(x)
    b = BatchNormalization()(b)
    b = Conv2D(int(num_kernel),3,activation=activation,padding="same",kernel_regularizer=kreg)(b)
    b = BatchNormalization()(b)
    b = Conv2D(num_kernel, 3, activation=activation, padding="same",kernel_regularizer=kreg)(b)
    b = BatchNormalization()(b)
    c = Conv2D(int(num_kernel),1,activation=activation,padding="same",kernel_regularizer=kreg)(x)
    c = BatchNormalization()(c)
    #res=concatenate([a,b,c],axis=-1)
    res=Concatenate()([a,b,c])
    res=Add()([res,sk])
    
  
    res=BatchNormalization()(res)
    return res
def get_models_2D():
    input1 = Input(SHAPE)
    initial_kernel_num = 64
    x = input1
    x = Conv2D(initial_kernel_num, (7,3),strides=(2,1), activation="relu", padding="same")(x)
    x = BatchNormalization()(x)
    x = multi_conv2D(x, initial_kernel_num)
    x = multi_conv2D(x, initial_kernel_num)
    x = MaxPooling2D(pool_size=(3,1))(x)
    
    x = multi_conv2D(x, int(initial_kernel_num*1.5))
    x = multi_conv2D(x, int(initial_kernel_num*1.5))
    x = MaxPooling2D(pool_size=(3,1))(x)
  
    x = multi_conv2D(x, int(initial_kernel_num*2))
    x = multi_conv2D(x, int(initial_kernel_num*2))
    x = MaxPooling2D(pool_size=(2,1))(x)
  
    x = multi_conv2D(x, initial_kernel_num*3)
    x = multi_conv2D(x, initial_kernel_num*3)
    x = multi_conv2D(x, initial_kernel_num*4)
    x = MaxPooling2D(pool_size=(2,1))(x)
    
    x = multi_conv2D(x, initial_kernel_num*5)
    x = multi_conv2D(x, initial_kernel_num*6)
    x = multi_conv2D(x, initial_kernel_num*7)
    x = MaxPooling2D(pool_size=(2,1))(x)
    
    x = multi_conv2D(x, initial_kernel_num*8)
    x = multi_conv2D(x, initial_kernel_num*8)
    x = multi_conv2D(x, initial_kernel_num*8)
    x =MaxPooling2D(pool_size=(2,1))(x)
   
    x = multi_conv2D(x, initial_kernel_num*12)
    x = multi_conv2D(x, initial_kernel_num*14)
    x = multi_conv2D(x, initial_kernel_num*16)

    x = multi_conv2D(x, initial_kernel_num*16)
    x = multi_conv2D(x, initial_kernel_num*16)
    a1 = GlobalAveragePooling2D()(x)
    a1 = Dense(1,activation=None)(a1)

    model = Model(inputs=input1, outputs=a1)
    return model

model = get_models_2D()
